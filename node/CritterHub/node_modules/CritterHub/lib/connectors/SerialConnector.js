'use strict';


var SerialConnector = function(hub) {
	console.log('SerialConnector!', hub);
	
	var _ = require('underscore'),
		sp = require('serialport'),  // https://www.npmjs.com/package/serialport
		_port,
		_manufacturers = ['Arduino LLC', 'Silicon Labs'];
	
	function _init() {
		_scanPorts();
	}
		
	function _scanPorts() {
		function scan() {
			//console.log('scanning serial ports...');
			sp.list(function (err, ports) {
				ports.forEach(function(port) {
					console.log('port', port);
					if (   
						   port.manufacturer === 'Arduino LLC' 
						|| port.manufacturer === 'Silicon Labs'
						|| (port.vendorId    === '0x1a86' && port.productId === '0x7523') // robotdyn nano clone
						|| port.comName      === '/dev/cu.wchusbserialfd140'		      // any ch34x device
						|| port.comName      === '/dev/cu.Repleo-CH341-000014F'		      // 
						
						) { 
						
						console.log('-------------------------');
						console.log('port found!', port);
						
						clearInterval(scanIntervalID);
						_connectToPort(port.comName);
					}
				});
			});
		}
		scan();
		var scanIntervalID = setInterval(function() {
			scan();	
		}, 1000);
	}
	
	function _connectToPort(comName) {
		console.log('SerialConnector._connectToPort', comName);
		_port = new sp.SerialPort(comName, { 
				baudrate: 9600,
				buffersize: 99999,
				flowControl: false,
				parser: sp.parsers.readline("\n")
			}, false); // this is the openImmediately flag [default is true]
		_startConnection();
	}
	
	function _startConnection() {
		console.log('starting connection to serial port...');
		//serialPort.parser = serialPort.parsers.readline("\n");

		_port.open(function (error) {
			if ( error ) {
				console.log('failed to open: '+error);
			} else {
				console.log('open');
				
				_port.on('data', function(buffer) {
				
					// https://itp.nyu.edu/physcomp/labs/labs-serial-communication/lab-serial-communication-with-node-js/
					// https://github.com/vanevery/p5.serialport
				
					//console.log(buffer);
					//console.log(buffer.length);
					
					var s = buffer.toString(),
						json;
					
					console.log('data received:', s);

					try {
						json = JSON.parse(s);
						//console.log('json', json);
					} catch(e) {
						//console.log(e.message);
					}
					
					hub.data(json);
					
					//var data = JSON.parse(buffer);
					//console.log('data', data);	
					//console.log('data received:', s, json);
					
					/*
					try {
						io.emit('data', JSON.parse(s));
					} catch(e) {

					}
					*/

				});
				
				/*
				setInterval(function() {
					_port.write(Date() + '\n', function() {
						console.log('written');
					});
				}, 1000);
				*/
				
				/*
				serialPort.write("ls\n", function(err, results) {
					console.log('err ' + err);
					console.log('results ' + results);
				});

				sendStuffIntervalID = setInterval(function() {
						serialPort.write(moment().format("HH:MM:ss") + "\n", function(err, results) {
						console.log('err ', err);
						console.log('results ', results);
					});
				}, 1000);
				*/
			}
			_port.on('close', function (error) {
				console.log('port closed: ' + error);
				_port.flush();
				_scanPorts();
			});
			
		});
		
		
	}

	_init();
	
	
};

module.exports = function(hub) {
	return new SerialConnector(hub);
};
